#!mesosphere/dispatch-starlark:v0.6
# vi:syntax=python
load("github.com/mesosphere/cluster-claim-controller/starlark/claim@master", "make_kind_cluster", "fetch_kubeconfig", "cleanup")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/docker@0.0.4", "dindTask")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/git@0.0.7", "git_resource")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/k8s@0.0.7", "secret_var")
load("github.com/mesosphere/dispatch-catalog/starlark/stable/pipeline@0.0.7", "push", "pull_request", "cron", "clean")

git_clone_dirname = "kba-git-src"
kind_cluster_name = "kba-kind-cluster"

git_resource(git_clone_dirname, url="$(context.git.url)", revision="$(context.git.commit)")

kind_cluster=make_kind_cluster(kind_cluster_name, git_clone_dirname)

dindTask("dispatch-integration-test",
    inputs=[git_clone_dirname],
    deps=[kind_cluster],
    steps=[
        fetch_kubeconfig(kind_cluster_name, git_clone_dirname),

        k8s.corev1.Container(
            name="fetch-master",
            workingDir="/workspace/{git_clone_dirname}/".format(git_clone_dirname=git_clone_dirname),
            args=["git", "fetch", "origin", "master"]),

        k8s.corev1.Container(
            name="dispatch-integration-test",
            image="mesosphere/kubeaddons-ci:dispatch@sha256:80a6f3c8775133b4ad2fab3d44ab4fbb4b541dbc03fcdb296b13f67611427d8c",
            workingDir="/workspace/{git_clone_dirname}/".format(git_clone_dirname=git_clone_dirname),
            command=["/entrypoint.sh", "make", "dispatch-test"],

            env=[
                k8s.corev1.EnvVar(name="DISPATCH_CI", value="true"),
                k8s.corev1.EnvVar(name="GOPRIVATE", value="github.com/mesosphere"),
                k8s.corev1.EnvVar(name="AWS_REGION", value="us-west-2"),
                k8s.corev1.EnvVar(name="AWS_ACCESS_KEY_ID", valueFrom=secret_var("d2iq-dispatch-aws-creds", "AWS_ACCESS_KEY_ID")),
                k8s.corev1.EnvVar(name="AWS_SECRET_ACCESS_KEY", valueFrom=secret_var("d2iq-dispatch-aws-creds", "AWS_SECRET_ACCESS_KEY")),
                k8s.corev1.EnvVar(name="SSH_KEY_BASE64", valueFrom=secret_var("d2iq-dispatch-git-ssh-base64", "ssh-privatekey-base64"))],

            resources=k8s.corev1.ResourceRequirements(
              requests={
                "cpu": k8s.resource_quantity("1000m"),
                "memory": k8s.resource_quantity("2Gi")}))
           ])

task("bump-charts", 
    inputs=[git_clone_dirname], 
    steps=[
        k8s.corev1.Container(
            name = "bump-charts",
            image = "mesosphere/bump-charts:latest",
            workingDir =  "/workspace/{git_clone_dirname}/scripts/ci/".format(git_clone_dirname=git_clone_dirname),
            command = ["/bin/sh", "-c"],
            args = [
                """
                set -e
                echo "$GPG_PRIVATE_KEY" > gpg_private_key
                echo "$GPG_PUBLIC_KEY" > gpg_public_key
                set -x
                git fetch origin
                gpg --import gpg_private_key
                gpg --import gpg_public_key
                git config --local commit.gpgsign true
                git config --local user.signingkey $GPG_KEY_ID
                git config --local user.name 'Dispatch CI'
                git config --local user.email '56653984+d2iq-dispatch@users.noreply.github.com'
                python3 bump_charts.py
                """
            ],
            resources = k8s.corev1.ResourceRequirements(
                limits = {
                    "cpu": k8s.resource_quantity("1000m"),
                    "memory": k8s.resource_quantity("4Gi")
                }
            ),
            env=[k8s.corev1.EnvVar(name="GITHUB_TOKEN", valueFrom=secret_var("d2iq-dispatch-basic-auth", "password")),
                k8s.corev1.EnvVar(name="GPG_PRIVATE_KEY", valueFrom=secret_var("d2iq-dispatch-gpg", "private_key")),
                k8s.corev1.EnvVar(name="GPG_PUBLIC_KEY", valueFrom=secret_var("d2iq-dispatch-gpg", "public_key")),
                k8s.corev1.EnvVar(name="GPG_KEY_ID", valueFrom=secret_var("d2iq-dispatch-gpg", "key_id"))]
        )])

task("test-bump-charts",
    inputs=[git_clone_dirname],
    steps=[
        k8s.corev1.Container(
            name = "test-bump-charts",
            image = "mesosphere/bump-charts:latest",
            workingDir =  "/workspace/{git_clone_dirname}/scripts/ci/".format(git_clone_dirname=git_clone_dirname),
            command = ["pytest"],
            args= ["--disable-warnings", "-vv"]
        )])

clean_kind=cleanup(kind_cluster, "dispatch-integration-test", git_clone_dirname)

action(tasks=["dispatch-integration-test", clean_kind], on=pull_request())
action(tasks=["dispatch-integration-test", clean_kind], on=pull_request(chatops=["test"]))

action(tasks=["test-bump-charts"], on=pull_request(paths=["scripts/ci/bump_charts.py", "scripts/ci/test_bump_charts.py", "scripts/ci/unit_test_yaml_samples/*"]))
action(name="weekly-chart-bump", on=cron(schedule="0 6 * * 1"), tasks=["bump-charts"])
